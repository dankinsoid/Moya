import Foundation
import Combine
#if !COCOAPODS
    import Moya
#endif

#if canImport(UIKit)
    import UIKit.UIImage
#elseif canImport(AppKit)
    import AppKit.NSImage
#endif

/// Extension for processing raw NSData generated by network access.
public extension Publisher where Output == Response {

    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    func filter<R: RangeExpression>(statusCodes: R) -> AnyPublisher<Output, Error> where R.Bound == Int {
			simpleError().flatMap { out in Result.Publisher(Result { try out.filter(statusCodes: statusCodes) }) }.any()
    }

    /// Filters out responses that has the specified `statusCode`.
    func filter(statusCode: Int) -> AnyPublisher<Output, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.filter(statusCode: statusCode) }) }.any()
    }

    /// Filters out responses where `statusCode` falls within the range 200 - 299.
    func filterSuccessfulStatusCodes() -> AnyPublisher<Output, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.filterSuccessfulStatusCodes() }) }.any()
    }

    /// Filters out responses where `statusCode` falls within the range 200 - 399
    func filterSuccessfulStatusAndRedirectCodes() -> AnyPublisher<Output, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.filterSuccessfulStatusAndRedirectCodes() }) }.any()
    }

    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    func mapImage() -> AnyPublisher<Image, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.mapImage() }) }.any()
    }

    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    func mapJSON(failsOnEmptyData: Bool = true) -> AnyPublisher<Any, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.mapJSON(failsOnEmptyData: failsOnEmptyData) }) }.any()
    }

    /// Maps received data at key path into a String. If the conversion fails, the signal errors.
    func mapString(atKeyPath keyPath: String? = nil) -> AnyPublisher<String, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.mapString(atKeyPath: keyPath) }) }.any()
    }

    /// Maps received data at key path into a Decodable object. If the conversion fails, the signal errors.
    func map<D: Decodable>(_ type: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder(), failsOnEmptyData: Bool = true) -> AnyPublisher<D, Error> {
			simpleError().flatMap { out in Result.Publisher(Result { try out.map(type, atKeyPath: keyPath, using: decoder, failsOnEmptyData: failsOnEmptyData) }) }.any()
    }
}

public extension Publisher where Output == ProgressResponse {

    /**
     Filter completed progress response and maps to actual response

     - returns: response associated with ProgressResponse object
     */
    func filterCompleted() -> AnyPublisher<Response, Error> {
				simpleError()
            .filter { $0.completed }
            .flatMap { progress -> AnyPublisher<Response, Error> in
                switch progress.response {
								case .some(let response): return Just(response).simpleError().any()
								case .none: return Empty().any()
                }
            }
						.any()
    }

    /**
     Filter progress events of current ProgressResponse

     - returns: observable of progress events
     */
    func filterProgress() -> AnyPublisher<Double, Failure> {
			filter { !$0.completed }.map { $0.progress }.any()
    }
}
